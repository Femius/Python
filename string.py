# импорт для 5 задачи
from itertools import permutations

## a = [1,2,3,11,12,32,11,-5]
# print(min(a))
# print(max(a))
# print(len(a))
# print(a[len(a)-1])
# print(a.index(12))
# print(a[3])
# print(a.count(11))
from operator import index

# string = "Привет мир!"
# print(string.count("!"))

# string = "привет мир, Как у Тебя дела? ещё одна фраза. а затем вторая"
# print(string.capitalize())
# print(string.title())
# print(string.upper())
# print(string.lower())
# print(string.swapcase())
#
# low = string.lower()
# print(low.isupper())
# print(low.islower())
# print(low.istitle())
#
# print(" - ".join(["Яблоко", "Груша"]))
#
# words = ["Привет", "мир"]
# result = " ".join(words)
# print(result)
#
# nums = [1, 2, 3]
# # print("".join(nums)) будет ошибка по типу данных
# print("-".join(map(str, nums)))
# print([str(x) for x in nums])
#
# print(string.split(" "))
#
# print(string.partition(" "))
#
# print(string.startswith("привет мир"))
# print(string.endswith("Вторая"))
#
# print(string.find("привет")) # начинается с 0 индекса
# print(string.find("мир")) # начинается с 7 индекса
# print(string.find("и")) # индекс первого вхождения (первой буквы "и") (индекс 2)
# print(string.find("абвгдеж")) # значение не найдено (фиксированный ответ -1)
# print(string.find("Привет")) # поиск регистрозависимый (первая буква в оригнале маленькая)
# # т.е. ничего не найдено (-1)
#
# print(string.find("и", 5)) # поиск начиная с 5-го индекса для буквы и (8 индекс)
# print(string.find("и", 3, 5)) # поиск начиная с 3-го по 5-й индекс
# # для буквы и (ничего не найдено в этом диапазоне, вернули -1)
#
# print(string.replace("мир", "Россия")) # замена старого на новое
# print("привет мир, пока мир".replace("мир", "Россия")) # заменяет все вхождения
# print("привет Мир, пока мир".replace("мир", "Россия")) # чувствителен к регистру


# 1. Напишите программу, которая принимает строку от пользователя и выводит ее в обратном порядке.
# s = input("Введите строку: ")
# print(s[::-1])

# 2. Напишите программу, которая принимает две строки и проверяет,
# являются ли они анаграммами (то есть состоят из одних и тех же символов в любом порядке).
# s1 = input("Введите первую строку: ").lower()
# s2 = input("Введите вторую строку: ").lower()
# print(sorted(s1) == sorted(s2))

# 3. Напишите программу, которая принимает строку и подсчитывает
# количество гласных и согласных букв в ней.
# s = input("Введите строку: ").upper()
# vowels = "АОУЭЫИЯЕЁЮ"
# consonants = "БВГДЖЗЙКЛМНПРСТФХЦЧШЩ"
# v = c = 0
# for char in s:
#     if char in vowels:
#         v += 1
#     elif char in consonants:
#         c += 1
# print("Гласных:", v)
# print("Согласных:", c)

# 4. Напишите программу, которая принимает строку и проверяет,
# является ли она палиндромом (то есть одинаково читается в обоих направлениях).
# s = input("Введите строку: ").lower().replace(" ", "")
# if s == s[::-1]:
#     print("Палиндром")
# else:
#     print("Строка не является палиндромом")


# # *5. Напишите программу, которая принимает строку и выводит на экран все перестановки ее символов.
# # (не трогать пока что)
#
# s = input("Введите строку")
# a = list(s)
# n = len(a)
# final = []
# index = 0
# stack = [(a, 0)]
#
# while index < len(stack):
#     current, l = stack[index]
#     index += 1
#
#     if l == n - 1:
#         print("".join(current))
#     else:
#         i = n - 1
#         while i >= l:
#             temp = current[:]
#             temp[l], temp[i] = temp[i], temp[l]
#             stack.append((temp, l + 1))
#             i -= 1


# # решение через импорт permutations
# s = input("Введите строку")
# perm = permutations(s)
# for p in perm:
#     print("".join(p))

#
# # 8. Напишите программу, которая принимает строку и заменяет каждое вхождение определенного слова на другое слово.
#
# s = input("Введите строку: ")
# old = input("Какое слово нужно заменить?")
# new = input("На какое слово заменить ")
# print(s.replace(old, new))

# 9. Напишите программу, которая принимает строку и проверяет,
# является ли она панграммой (то есть содержит все буквы алфавита).
# s = input("Введите строку: ").lower()
# alphabet = "абвгдежзийклмнопрстуфхцчшщъыьэюяё"
#
# letters_in_s = set()
# for char in s:
#     if char in alphabet:
#         letters_in_s.add(char)
#
# if len(letters_in_s) == len(alphabet):
#     print("Строка является панграммой")
# else:
#     print("Строка НЕ является панграммой")

# альтернативный вариант
# s = input("Введите строку: ").lower()
# alphabet = set("абвгдежзийклмнопрстуфхцчшщъыьэюяё")
# print(alphabet.issubset(set(s)))

# 10. Напишите программу, которая принимает строку и возвращает новую строку,
# в которой каждое слово начинается с заглавной буквы.
# s = input("Введите строку: ")
# print(s.title())

# 13. Анна решила представить некую таблицу с заглавными и строчными буквами русского алфавита в красивом формате.
# Об этом ее попросили англоязычные друзья из социальных сетей.
#
# Недолго думая девушка создала скрипт, который выполнял подобную операцию.
# Результат работы программы продемонстрирован ниже.
# Напишите прогамму, которая сможет вывести аналогичный результат
# Подсказака: в строках с галочками элемент ^ повторяется 27 раз
#
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  А а  ||  К к  ||  Х х  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Б б  ||  Л л  ||  Ц ц  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  В в  ||  М м  ||  Ч ч  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Г г  ||  Н н  ||  Ш ш  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Д д  ||  О о  ||  Щ щ  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Е е  ||  П п  ||  Ъ ъ  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Ё ё  ||  Р р  ||  Ы ы  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Ж ж  ||  С с  ||  Ь ь  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  З з  ||  Т т  ||  Э э  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  И и  ||  У у  ||  Ю ю  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
# |  Й й  ||  Ф ф  ||  Я я  |
# ^^^^^^^^^^^^^^^^^^^^^^^^^^^
#
# alphabet = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"
#
# for position in range(11):
#     print("^" * 27)
#     for letter in alphabet:
#         if alphabet.index(letter) % 11 == position:
#             print("| ", letter.upper(), letter, " |", end="")
#     print()
# print("^" * 27)
#
















